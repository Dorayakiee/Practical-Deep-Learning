{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"This is a notebook inspired from the same-named notebook at kaggle, created for the fast.ai book.\n\nSince the original kaggle exercise is not working correctly (mainly problems with the duckduckgo_search library) I've decided to change the parts that don't work myself.\n\nThe first part has some different parts, but parts 2 and 3 are the same as the original notebook. Hope this is helpful!","metadata":{}},{"cell_type":"markdown","source":"Make sure to select \"Always use latest environment\" under Session Options/Environment at the bottom right corner.","metadata":{}},{"cell_type":"markdown","source":"## Is it a bird?","metadata":{}},{"cell_type":"code","source":"#NB: Kaggle requires phone verification to use the internet or a GPU. If you haven't done that yet, the cell below will fail\n#    This code is only here to check that your internet is enabled. It doesn't do anything else.\n#    Here's a help thread on getting your phone number verified: https://www.kaggle.com/product-feedback/135367\nimport socket\ntry:\n    socket.setdefaulttimeout(1)\n    socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect(('1.1.1.1', 53))\nexcept socket.error:\n    raise Exception(\"STOP: No internet. Click '>|' in top right and set 'Internet' switch to on\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T00:02:24.687238Z","iopub.execute_input":"2024-07-22T00:02:24.688071Z","iopub.status.idle":"2024-07-22T00:02:24.698313Z","shell.execute_reply.started":"2024-07-22T00:02:24.688030Z","shell.execute_reply":"2024-07-22T00:02:24.697364Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Firstly, we'll need to install some libraries. This may take a few minutes.","metadata":{"_kg_hide-input":true}},{"cell_type":"code","source":"# It's a good idea to ensure you're running the latest version of any libraries you need.\n# `!pip install -Uqq <libraries>` upgrades to the latest version of <libraries>\n# NB: You can safely ignore any warnings or errors pip spits out about running as root or incompatibilities\nimport os\niskaggle = os.environ.get('KAGGLE_KERNEL_RUN_TYPE', '')\n\nif iskaggle:\n    !pip install -Uqq fastai icrawler","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-07-22T00:02:29.651938Z","iopub.execute_input":"2024-07-22T00:02:29.652296Z","iopub.status.idle":"2024-07-22T00:02:44.365520Z","shell.execute_reply.started":"2024-07-22T00:02:29.652267Z","shell.execute_reply":"2024-07-22T00:02:44.363709Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Step 1: Download images of birds and non-birds","metadata":{}},{"cell_type":"markdown","source":"In 2015 the idea of creating a computer system that could recognise birds was considered so outrageously challenging that it was the basis of [this XKCD joke](https://xkcd.com/1425/):","metadata":{}},{"cell_type":"markdown","source":"![image.png](https://imgs.xkcd.com/comics/tasks.png)","metadata":{}},{"cell_type":"markdown","source":"But today, we can do exactly that, in just a few minutes, using entirely free resources!\n\nThe basic steps we'll take are:\n\n1. Use DuckDuckGo to search for images of \"bird photos\"\n1. Use DuckDuckGo to search for images of \"forest photos\"\n1. Fine-tune a pretrained neural network to recognise these two groups\n1. Try running this model on a picture of a bird and see if it works.","metadata":{}},{"cell_type":"markdown","source":"This is just some code for setting up the crawler that'll get us images from the internet.\n\nIt's not necessary for training our model so you can skip this block if you're not interested.","metadata":{"_kg_hide-input":true}},{"cell_type":"code","source":"from icrawler import ImageDownloader\nfrom icrawler.builtin import GoogleImageCrawler\nfrom icrawler.builtin.google import GoogleFeeder, GoogleParser\n\nclass MyDownloader(ImageDownloader):\n    def get_filename(self, task, default_ext):\n        filename = super(MyDownloader, self).get_filename(task, default_ext)\n        filename = filename.split(\".\")[0]\n        return self.prefix + filename + \".png\"\n\nclass MyCrawler(GoogleImageCrawler):\n    def __init__(self, feeder_cls=GoogleFeeder, parser_cls=GoogleParser, downloader_cls=MyDownloader, prefix=\"\", *args, **kwargs):\n        super().__init__(feeder_cls, parser_cls, downloader_cls, *args, **kwargs)\n        self.downloader.prefix = prefix","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-07-22T00:02:47.206177Z","iopub.execute_input":"2024-07-22T00:02:47.206588Z","iopub.status.idle":"2024-07-22T00:02:47.537733Z","shell.execute_reply.started":"2024-07-22T00:02:47.206549Z","shell.execute_reply":"2024-07-22T00:02:47.536701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Apart from the crawler, we'll also set up a search_images function for the sake of ease. This function will get images from the internet and download it.","metadata":{"_kg_hide-input":true}},{"cell_type":"code","source":"# We'll define a search_images function for the sake of ease\n\ndef search_images(term, max_images=30, folder_name=\".\"):\n    print(f\"Searching for '{term}'\")\n    crawler = MyCrawler(\n        prefix=term,\n        storage={'root_dir': folder_name}, \n    )\n    crawler.crawl(keyword=term, max_num=max_images)","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-07-22T00:02:51.118899Z","iopub.execute_input":"2024-07-22T00:02:51.119994Z","iopub.status.idle":"2024-07-22T00:02:51.126629Z","shell.execute_reply.started":"2024-07-22T00:02:51.119959Z","shell.execute_reply":"2024-07-22T00:02:51.125255Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's start by searching for a bird photo and seeing what kind of result we get.","metadata":{}},{"cell_type":"code","source":"search_images(\"bird\", 1)\nsearch_images(\"horse\", 1)\nsearch_images(\"dog\", 1)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T00:02:52.677674Z","iopub.execute_input":"2024-07-22T00:02:52.678577Z","iopub.status.idle":"2024-07-22T00:03:01.706687Z","shell.execute_reply.started":"2024-07-22T00:02:52.678543Z","shell.execute_reply":"2024-07-22T00:03:01.705613Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's take a look at the photo we downloaded:","metadata":{}},{"cell_type":"code","source":"from fastai.vision.all import *\nim = Image.open(\"bird000001.png\")\nim2 = Image.open(\"horse000001.png\")\nim3 = Image.open(\"dog000001.png\")\n# icrawler names the downloaded photos from 000001 to 999999\nim.to_thumb(256,256)\nim2.to_thumb(256,256)\nim3.to_thumb(256,256)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T00:03:57.596408Z","iopub.execute_input":"2024-07-22T00:03:57.596805Z","iopub.status.idle":"2024-07-22T00:04:06.058225Z","shell.execute_reply.started":"2024-07-22T00:03:57.596772Z","shell.execute_reply":"2024-07-22T00:04:06.057206Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Looks great! Now let's get a forest photo as well.","metadata":{}},{"cell_type":"code","source":"search_images(\"forest\", 1)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-07-22T00:04:19.250058Z","iopub.execute_input":"2024-07-22T00:04:19.250808Z","iopub.status.idle":"2024-07-22T00:04:21.263463Z","shell.execute_reply.started":"2024-07-22T00:04:19.250773Z","shell.execute_reply":"2024-07-22T00:04:21.262425Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Let's look at the forest photo:","metadata":{}},{"cell_type":"code","source":"im = Image.open(\"forest000001.png\")\nim.to_thumb(256,256)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-07-22T00:04:33.858542Z","iopub.execute_input":"2024-07-22T00:04:33.859020Z","iopub.status.idle":"2024-07-22T00:04:33.900711Z","shell.execute_reply.started":"2024-07-22T00:04:33.858984Z","shell.execute_reply":"2024-07-22T00:04:33.899752Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Our searches seem to be giving reasonable results, so let's grab a few examples of each of \"bird\" and \"forest\" photos, and save each group of photos to a different folder (I'm also trying to grab a range of lighting conditions here):","metadata":{}},{"cell_type":"markdown","source":"This code block may take a few minutes","metadata":{}},{"cell_type":"code","source":"## !! IMPORTANT\n# This represents the number of photos that'll be downloaded for each category.\n# If you don't want to wait you can lower this number so less images will be downloaded.\n# Having less images to train on may lead to worse neural network performance.\nno_of_photos = 20 # Default is 20\n\nsearches = 'forest','bird','dog','horse'\npath = Path('All categories')\nfrom time import sleep\n\nfor o in searches:\n    dest = (path/o)\n    dest.mkdir(exist_ok=True, parents=True)\n    search_images(f\"{o} photo\", no_of_photos, dest)\n    sleep(10)  # Pause between searches to avoid over-loading server\n    search_images(f\"{o} sun photo\", no_of_photos, dest)\n    sleep(10)\n    search_images(f\"{o} night photo\", no_of_photos, dest) \n    # Changed this to get \"night photo\" instead of \"shade photo\" since the original would cause paint tones to be downloaded \n    sleep(10)\n    print(f\"Photos of {o} completed!\")\n\nresize_images(path, max_size=400, dest=path, recurse=True)\nprint(f\"Photos resized!\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T00:06:56.492295Z","iopub.execute_input":"2024-07-22T00:06:56.492683Z","iopub.status.idle":"2024-07-22T00:10:58.699099Z","shell.execute_reply.started":"2024-07-22T00:06:56.492655Z","shell.execute_reply":"2024-07-22T00:10:58.697930Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Step 2: Train our model","metadata":{}},{"cell_type":"markdown","source":"Some photos might not download correctly which could cause our model training to fail, so we'll remove them:","metadata":{}},{"cell_type":"code","source":"failed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T00:11:15.967863Z","iopub.execute_input":"2024-07-22T00:11:15.968876Z","iopub.status.idle":"2024-07-22T00:11:17.006282Z","shell.execute_reply.started":"2024-07-22T00:11:15.968819Z","shell.execute_reply":"2024-07-22T00:11:17.005324Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"To train a model, we'll need `DataLoaders`, which is an object that contains a *training set* (the images used to create a model) and a *validation set* (the images used to check the accuracy of a model -- not used during training). In `fastai` we can create that easily using a `DataBlock`, and view sample images from it:","metadata":{}},{"cell_type":"code","source":"dls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n=15)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T00:13:20.515560Z","iopub.execute_input":"2024-07-22T00:13:20.516380Z","iopub.status.idle":"2024-07-22T00:13:22.846942Z","shell.execute_reply.started":"2024-07-22T00:13:20.516347Z","shell.execute_reply":"2024-07-22T00:13:22.845895Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Here what each of the `DataBlock` parameters means:\n\n    blocks=(ImageBlock, CategoryBlock),\n\nThe inputs to our model are images, and the outputs are categories (in this case, \"bird\" or \"forest\").\n\n    get_items=get_image_files, \n\nTo find all the inputs to our model, run the `get_image_files` function (which returns a list of all image files in a path).\n\n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n\nSplit the data into training and validation sets randomly, using 20% of the data for the validation set.\n\n    get_y=parent_label,\n\nThe labels (`y` values) is the name of the `parent` of each file (i.e. the name of the folder they're in, which will be *bird* or *forest*).\n\n    item_tfms=[Resize(192, method='squish')]\n\nBefore training, resize each image to 192x192 pixels by \"squishing\" it (as opposed to cropping it).","metadata":{}},{"cell_type":"markdown","source":"Now we're ready to train our model. The fastest widely used computer vision model is `resnet18`. You can train this in a few minutes, even on a CPU! (On a GPU, it generally takes under 10 seconds...)\n\n`fastai` comes with a helpful `fine_tune()` method which automatically uses best practices for fine tuning a pre-trained model, so we'll use that.","metadata":{}},{"cell_type":"code","source":"learn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(6)","metadata":{"execution":{"iopub.status.busy":"2024-07-22T00:14:15.963037Z","iopub.execute_input":"2024-07-22T00:14:15.964024Z","iopub.status.idle":"2024-07-22T00:14:28.197186Z","shell.execute_reply.started":"2024-07-22T00:14:15.963981Z","shell.execute_reply":"2024-07-22T00:14:28.195950Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Generally when I run this I see 100% accuracy on the validation set (although it might vary a bit from run to run).\n\n\"Fine-tuning\" a model means that we're starting with a model someone else has trained using some other dataset (called the *pretrained model*), and adjusting the weights a little bit so that the model learns to recognise your particular dataset. In this case, the pretrained model was trained to recognise photos in *imagenet*, and widely-used computer vision dataset with images covering 1000 categories) For details on fine-tuning and why it's important, check out the [free fast.ai course](https://course.fast.ai/).","metadata":{}},{"cell_type":"markdown","source":"## Step 3: Use our model (and build your own!)","metadata":{}},{"cell_type":"markdown","source":"Let's see what our model thinks about that bird we downloaded at the start:","metadata":{}},{"cell_type":"code","source":"category,_,probs = learn.predict(PILImage.create('dog000001.png'))\nprint(f\"This is a: {category}.\")\nprint(f\"Probability it's a dog: {probs[1]:.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-22T00:16:30.371947Z","iopub.execute_input":"2024-07-22T00:16:30.372909Z","iopub.status.idle":"2024-07-22T00:16:30.409878Z","shell.execute_reply.started":"2024-07-22T00:16:30.372874Z","shell.execute_reply":"2024-07-22T00:16:30.408894Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Good job, resnet18. :)\n\nSo, as you see, in the space of a few years, creating computer vision classification models has gone from \"so hard it's a joke\" to \"trivially easy and free\"!\n\nIt's not just in computer vision. Thanks to deep learning, computers can now do many things which seemed impossible just a few years ago, including [creating amazing artworks](https://openai.com/dall-e-2/), and [explaining jokes](https://www.datanami.com/2022/04/22/googles-massive-new-language-model-can-explain-jokes/). It's moving so fast that even experts in the field have trouble predicting how it's going to impact society in the coming years.\n\nOne thing is clear -- it's important that we all do our best to understand this technology, because otherwise we'll get left behind!","metadata":{}},{"cell_type":"markdown","source":"Now it's your turn. Click \"Copy & Edit\" and try creating your own image classifier using your own image searches!\n\nIf you enjoyed this, please consider clicking the \"upvote\" button in the top-right -- it's very encouraging to us notebook authors to know when people appreciate our work.","metadata":{}}]}